---
layout: single
toc: true
toc_label: "Table of contents"
title:  "Git commands"
date:   2021-09-02 16:52:00 +0800
categories: Git
---

# Git命令

## `git fetch`

从远程库中下载commits，文件和refs到本地。并不会强行把变动合并到本地库。

[Git fetch [Atlassian](https://www.atlassian.com/git/tutorials/syncing/git-fetch)

## `git pull`

把远程库中的改变下载到本地，相当于使用 `git fetch` 后自动和本地库合并。

## `git rebase`

把一系列的commits移动或者合并到一个新的base commit，可用于保持一个线性的项目变动历史。

[Git rebase [Atlassian](https://www.atlassian.com/git/tutorials/rewriting-history/git-rebase)

## `git cherry pick`

可以任意挑选一个commit并添加到当前的working HEAD。
enables arbitrary Git commits to be picked by reference and appended to the current working HEAD.

[Git cherry pick [Atlassian]](https://www.atlassian.com/git/tutorials/cherry-pick)

## `git reset`

a complex and versatile tool for undoing changes. For example, `git reset x` moves both the HEAD and branch refs to the specified commit (x).
`--soft`: the ref pointers are updated and the reset stops there. The Staging Index and the Working Directory are left untouched.
`--hard`: the most direct, DANGEROUS, and frequently used option, any pending work that was hanging out in the Staging Index and Working Directory will be lost.
`--mixed`: the default operating mode. The ref pointers are updated. The Staging Index is reset to the state of the specified commit. Any changes that have been undone from the Staging Index are moved to the Working Directory.

[Git reset [Atlassian]](https://www.atlassian.com/git/tutorials/undoing-changes/git-reset)

## `git checkout`

lets you navigate between the branches created by git branch. Checking out a branch updates the files in the working directory to match the version stored in that branch, and it tells Git to record all new commits on that branch.
It is similar but different from `git clone` as clone works to fetch code from a remote repository, alternatively checkout works to switch between versions of code already on the local system.

[Git checkout [Atlassian]](https://www.atlassian.com/git/tutorials/using-branches/git-checkout)

## `git add`

把当前工作路径下的改变转移到暂存区，在使用commit命令前改变并没有实际影响。

[Saving changes [Atlassian]](https://www.atlassian.com/git/tutorials/saving-changes)

## `git push`

将本地库的文件上传到远程库，即将本地的commits传输到远程库。对应的相反的命令是 `git fetch`。

## `git commit`

提交commit。不同的选项可查看文档。

[Git-commit Documentation [Git Book]](https://git-scm.com/docs/git-commit)

# 相关知识

## Git数据转换

有一个不错的描述Git数据传输的图。

![Git Data Transport Commands](/assets/Git_Transport.png)

**Git Data Transport Commands from [My Git Workflow [Oliver Steele]](https://blog.osteele.com/2008/05/my-git-workflow/)**

## HEAD, Working Tree and index

HEAD是指向当前commit的分支的指针，working tree是当前工作空间下的文件，index又被称为staging area（暂存区），存储准备下次commit提交的文件。

[What's the difference between HEAD, working tree, and git index in Git? [IntelliPaat]](https://intellipaat.com/community/14325/whats-the-difference-between-head-working-tree-and-git-index-in-git)

# 常用流程

1. `git checkout -b {branch name}` 创建一个分支并跳转到该分支。
2. `git add .` 把所有改变转移到暂存区。
3. `git commit -m {description}` 提交commit并包含一个对该commit的描述。
4. `git push {remote name} {branch name}` 把commit传输到远程对应的分支，remote name通常为origin。



# 参考资源
[Git Command](http://guides.beanstalkapp.com/version-control/common-git-commands.html)

[Learn Git with BitBucket Cloud [Atlassian](https://www.atlassian.com/git/tutorials/learn-git-with-bitbucket-cloud)

[Git Branching - Basic Branching and Merging [Git Book]](https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging)
