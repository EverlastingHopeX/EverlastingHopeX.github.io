---
layout: single
toc: true
toc_label: "Table of contents"
title:  "Git commands"
date:   2021-09-02 16:52:00 +0800
categories: Git
---

# Git命令

## `git fetch`

从远程库中下载commits，文件和refs到本地。并不会强行把变动合并到本地库。

[Git fetch [Atlassian](https://www.atlassian.com/git/tutorials/syncing/git-fetch)

## `git pull`

把远程库中的改变下载到本地，相当于使用 `git fetch` 后自动和本地库合并。

## `git rebase`

把一系列的commits移动或者合并到一个新的base commit，可用于保持一个线性的项目变动历史。

[Git rebase [Atlassian](https://www.atlassian.com/git/tutorials/rewriting-history/git-rebase)

## `git cherry pick`

可以任意挑选一个commit并添加到当前的working HEAD。

[Git cherry pick [Atlassian]](https://www.atlassian.com/git/tutorials/cherry-pick)

## `git reset`

用来撤销作出的改变。`git reset {commit name}` 会将HEAD和分支refs移动到特定的commit。reset有三种方式：
1. `--soft`：更新ref的指针，暂存区和工作目录未变动。
2. `--hard`：最直接，最危险，也最经常被使用的方式。暂存区和工作目录下所有待处理的工作都会消失。
3. `--mixed`：默认的操作模式。更新ref的指针，暂存区被重置到特定的commit的状态，暂存区内被撤销的工作被移动到工作目录。

[Git reset [Atlassian]](https://www.atlassian.com/git/tutorials/undoing-changes/git-reset)

## `git checkout`

用来跳转分支。checkout一个分支会更新工作目录下的文件以匹配分支中的文件，并告诉Git金路当前分支下所有新的commit。
该操作类似于 `git clone` 但也有区别。clone会从远端提取文件到本地，而checkout用于在本地跳转不同的版本。

[Git checkout [Atlassian]](https://www.atlassian.com/git/tutorials/using-branches/git-checkout)

## `git add`

把当前工作路径下的改变转移到暂存区，在使用commit命令前改变并没有实际影响。

[Saving changes [Atlassian]](https://www.atlassian.com/git/tutorials/saving-changes)

## `git push`

将本地库的文件上传到远程库，即将本地的commits传输到远程库。对应的相反的命令是 `git fetch`。

## `git commit`

提交commit。不同的选项可查看文档。

[Git-commit Documentation [Git Book]](https://git-scm.com/docs/git-commit)

# 相关知识

## Git数据转换

有一个不错的描述Git数据传输的图。

![Git Data Transport Commands](/assets/Git_Transport.png)

**Git Data Transport Commands from [My Git Workflow [Oliver Steele]](https://blog.osteele.com/2008/05/my-git-workflow/)**

## HEAD, Working Tree and index

HEAD是指向当前commit的分支的指针，working tree是当前工作空间下的文件，index又被称为staging area（暂存区），存储准备下次commit提交的文件。

[What's the difference between HEAD, working tree, and git index in Git? [IntelliPaat]](https://intellipaat.com/community/14325/whats-the-difference-between-head-working-tree-and-git-index-in-git)

# 常用流程

1. `git checkout -b {branch name}` 创建一个分支并跳转到该分支。
2. `git add .` 把所有改变转移到暂存区。
3. `git commit -m {description}` 提交commit并包含一个对该commit的描述。
4. `git push {remote name} {branch name}` 把commit传输到远程对应的分支，remote name通常为origin。



# 参考资源
[Git Command](http://guides.beanstalkapp.com/version-control/common-git-commands.html)

[Learn Git with BitBucket Cloud [Atlassian](https://www.atlassian.com/git/tutorials/learn-git-with-bitbucket-cloud)

[Git Branching - Basic Branching and Merging [Git Book]](https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging)
